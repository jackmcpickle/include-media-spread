// Adjust values from list
@function adjust-values($progress, $change-values-map, $ease) {

  $adjusted-values: ();

  @each $change-value-pair in $change-values-map {

    $start: map-get($change-value-pair, start);
    $change: map-get($change-value-pair, change);
    // adjust value based on type of ease
    $adjusted: ease($progress, $start, $change, $ease);
    // adjust to 2 decimal places
    $adjusted: round($adjusted * 100) / 100;
    $adjusted-values: join($adjusted-values, $adjusted, space);

  }

  @return clean-list($adjusted-values);
}

@function change-map-list($start-value, $end-value) {

  $different-lengths: length($start-value) != length($end-value);
  $start-list: $start-value;
  $end-list: $end-value;

  @if $different-lengths {
    // Split lists into comparable values
    $start-list: split-list($start-value);
    $end-list: split-list($end-value);
  }

  $change-value-list: change-value-list($start-list, $end-list);
  $change-map-list: ();

  @each $start, $change in zip($start-list, $change-value-list) {

    $change-map: (start: $start, change: $change);
    $change-map-list: join($change-map-list, $change-map, comma);
  }
  @return $change-map-list;
}

@function change-value-list($start, $end) {
  // combines lists with matching pairs
  $list: zip($start, $end);
  $change-value-list: ();
  // calculate change value on pairs

  @each $l in $list {
    $change: nth($l, 2) - nth($l, 1);
    $change-value-list: join($change-value-list, $change, comma);
  }

  @return $change-value-list;
}

// adapted from http://www.kirupa.com/forum/showthread.php?378287-Robert-Penner-s-Easing-Equations-in-Pure-JS-%28no-jQuery%29
@function ease($progress, $start-value, $change, $ease) {

  // value increases evenly
  @if $ease == linear {
    @return $change * $progress + $start-value;
  }

  // value increases on a curve, accelerating
  @if $ease == in-quad {
    @return $change * $progress * $progress + $start-value;
  }

  // value increases on a curve, decelerating
  @if $ease == out-quad {
    @return -$change * $progress * ($progress - 2) + $start-value;
  }

  // value accelerates sharply
  @if $ease == in-cubic {
    @return $change * pow($progress, 3) + $start-value;
  }

  // value decelerates sharply
  @if $ease == out-cubic {
    @return $change * (pow($progress - 1, 3) + 1) + $start-value;
  }

  // value accelerates more sharply
  @if $ease == in-quart {
    @return $change * pow($progress, 4) + $start-value;
  }

  // value decelerates more sharply
  @if $ease == out-quart {
    @return -$change * (pow($progress - 1, 4) - 1) + $start-value;
  }

  // value accelerates very sharply
  @if $ease == in-quint {
    @return $change * pow($progress, 5) + $start-value;
  }

  // value decelerates very sharply
  @if $ease == out-quint {
    @return $change * (pow($progress - 1, 5) + 1) + $start-value;
  }
}

// Fixes issue with single value list adding comma to end
@function clean-list($list) {

  @return if(length($list) == 1, nth($list, 1), $list);

}

// pow and sqrt required by ease function
// adapted from https://github.com/at-import/Sassy-math/blob/master/sass/math.scss
@function pow($base, $exponent) {
  $value: $base;

  @if $exponent > 1 {
    @for $i from 2 through $exponent {
      $value: $value * $base;
    }
  }

  @if $exponent < 1 {
    @for $i from 0 through - $exponent {
      $value: $value / $base;
    }
  }

  @return $value;
}

@function split-list($list) {

  $list-size: length($list);
  $top: '';
  $left: '';
  $bottom: '';
  $right: '';

  // top/bottom/left/right match
  @if ($list-size == 1) {
    $top: $list;
    $right: $list;
    $bottom: $list;
    $left: $list;
  }
  // top/bottom match, left/right match
  @elseif ($list-size == 2) {
    $top: nth($list, 1);
    $bottom: nth($list, 1);
    $right: nth($list, 2);
    $left: nth($list, 2);
  }
  // top/bottom differ, left/right match
  @elseif ($list-size == 3) {
    $top: nth($list, 1);
    $right: nth($list, 2);
    $left: nth($list, 2);
    $bottom: nth($list, 3);
  }
  // top/bottom/left/right differ
  @elseif ($list-size == 4) {
    @return $list;

  } @else {
    @warn 'Your #{list} is too large with #{$list-size} properties';
  }

  @return $top $right $bottom $left;

}

/// @author Jack McNicol
/// @access public
////


///
/// Calculates the difference between property values and distributes them through your include-media breakpoints.
///

///  @param {property} $property - CSS property to set
//   @param {value | values} $start-values - Start value(s) of the property
//   @param {value | values} $end-values - End value(s) of the property
//   @param {linear | in-quad | out-quad | in-cubic | out-cubic | in-quart | out-quart | in-quint | out-quint } $ease [linear] - Easing function to use when calculating value helpful for fine-tuning some widths in the mid-range
///
///

$ims-breakpoints: $breakpoints !default;

@mixin spread($property, $start-values, $end-values, $ease: linear, $breakpoints: $ims-breakpoints) {
  @if $start-values == $end-values {
    @warn 'You are passing the same values';
  }

  #{$property}: #{$start-values};   // default values

  $total-iterations: length($breakpoints); // Will loop through number of breakpoints
  $iteration: 1;
  $change-map-list: change-map-list($start-values, $end-values);

  @each $size, $breakpoint in $breakpoints {
    @if ( $iteration <= $total-iterations) {

      $progress: $iteration / $total-iterations;

      @include media('>=#{$breakpoint}') {
        #{$property}: adjust-values($progress, $change-map-list, $ease);
      }

    }
    $iteration: $iteration + 1;
  }
}
