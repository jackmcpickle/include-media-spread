// adapted from http://www.kirupa.com/forum/showthread.php?378287-Robert-Penner-s-Easing-Equations-in-Pure-JS-%28no-jQuery%29
@function ease($progress, $start-value, $change, $ease) {

  // value increases evenly
  @if $ease == linear {
    @return $change * $progress + $start-value;
  }

  // value increases on a curve, accelerating
  @if $ease == in-quad {
    @return $change * $progress * $progress + $start-value;
  }

  // value increases on a curve, decelerating
  @if $ease == out-quad {
    @return -$change * $progress * ($progress - 2) + $start-value;
  }

  // value accelerates sharply
  @if $ease == in-cubic {
    @return $change * pow($progress, 3) + $start-value;
  }

  // value decelerates sharply
  @if $ease == out-cubic {
    @return $change * (pow($progress - 1, 3) + 1) + $start-value;
  }

  // value accelerates more sharply
  @if $ease == in-quart {
    @return $change * pow($progress, 4) + $start-value;
  }

  // value decelerates more sharply
  @if $ease == out-quart {
    @return -$change * (pow($progress - 1, 4) - 1) + $start-value;
  }

  // value accelerates very sharply
  @if $ease == in-quint {
    @return $change * pow($progress, 5) + $start-value;
  }

  // value decelerates very sharply
  @if $ease == out-quint {
    @return $change * (pow($progress - 1, 5) + 1) + $start-value;
  }
}
